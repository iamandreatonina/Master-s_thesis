let kms : const =  0.004;
let kma : const =  0.5;
let jma : const =  1.0;
let kmi : const =  0.5;
let jmi : const =  1.0;
let kmd : const =  0.002;
let kmd_1 : const =  0.002;
let kwa : const = 0.2;
let jwa : const =  0.1;
let kwi : const =  2.0;
let kca : const =  2.0;
let jca : const =  0.1;
let kci : const =  0.2; 
let jci : const =  0.1;
let kmi_1 : const =  2.0;
let kws : const =  0.5;
let kwd : const =  0.5;
let kwd_1 : const =  2.0;
let jwi : const =  0.1;
let kcs : const =  0.01;
let kcd : const =  0.01;
let kcd_1 : const =  0.01;
let jcp_1 : const =  2.0;
let jcp_2 : const =  0.1;
let jcp_3 : const =  0.1;
let jcp_4 : const =  0.1;
let jcp_5 : const =  0.1;
let jcp_6 : const =  0.1;
let jcp_7 : const =  0.1;
let jcp_8 : const =  0.1;
let kcp_1 : const =  0.1;
let kcp_2 : const =  0.2;
let kcp_3 : const =  2.0;
let kcp_4 : const =  2.0;
let kcp_5 : const =  0.2;
let kcp_6 : const =  0.2;
let kcp_7 : const =  0.2;
let kcp_8 : const =  0.1;
let perc : const =  0.01;
let alpha : const =  1/500;


let r_1 : function = kms/alpha; 
let r_2 : function = (kma * alpha * |activator_p| * |TR|) / (jma + (alpha * |TR|)); 
let r_3 : function = (kmi * alpha * |inhibitor_p| * |TR_p|) / (jmi + (alpha * |TR_p|));
let r_4 : function = kmd * |TR_p|;
let r_5 : function = kmd_1 * |TR|;
let r_6 : function = (kma * alpha * |E_1| * |inhibitor|) / (jwa + (alpha * |inhibitor|));
let r_7 : function = (kwi * alpha * perc * |TR| * |inhibitor_p|) / (jwi + (alpha * |inhibitor_p|));
let r_8 : function = (kwi * alpha * |TR_p| * |inhibitor_p|) / (jwi + (alpha * |inhibitor_p|));
let r_9 : function = kwd_1 * |inhibitor|; 
let r_10 : function = kws * |TF_i|;
let r_11 : function = kwd * |inhibitor_p|; 
let r_12 : function = (kca * alpha * |TR_p| * |activator|) / (jca + (alpha * |activator|));
let r_13 : function = (kca * alpha * perc * |TR| * |activator|) / (jca + (alpha * |activator|)); 
let r_14 : function = (kci * alpha * |E_2| * |activator_p|) / (jci + (alpha * |activator_p|)); 
let r_15 : function = kcd * |activator_p|; 
let r_16 : function = kcs * |TF_a|;
let r_17 : function = kcd_1 * |activator|;
let r_18 : function = (kcp_7 * alpha * |Chp_i| * |inhibitor|) / (jcp_7 + (alpha * |inhibitor|));
let r_19 : function = (kcp_6 * alpha * |Pho| * |p_inhibitor|) / (jcp_6 + (alpha * |p_inhibitor|)); 
let r_20 : function = (kcp_1 * alpha * |Chp_i| * |inhibitor_p|) / (jcp_1 + (alpha * |inhibitor_p|)); 
let r_21 : function = (kcp_2 * alpha * |Pho| * |p_inhibitor_p|) / (jcp_2 + (alpha * |p_inhibitor_p|));
let r_22 : function = (kcp_5 * alpha * |E_1| * |p_inhibitor|) / (jcp_5 + (alpha * |p_inhibitor|)); 
let r_23 : function = kwd_1 * |p_inhibitor|; 
let r_24 : function = kwd * |p_inhibitor_p|;
let r_25 : function = (kcp_3 * alpha * |TR_p| * |p_inhibitor_p|) / (jcp_3 + (alpha * |p_inhibitor_p|));
let r_26 : function = (kcp_4 * alpha * perc * |TR| * |p_inhibitor_p|) / (jcp_4 + (alpha * |p_inhibitor_p|));
let r_27 : function = (kmi_1 * alpha * |p_inhibitor_p| * |TR_p|) / (jmi + (alpha * |TR_p|));
let r_28 : function = (kcp_8 * alpha * |Chp_a| * |activator_p|) / (jcp_8 + (alpha * |activator_p|)); 
let r_29 : function = (kca * alpha * |S| * |activator|) / (jca + (alpha * |activator|)) ;
