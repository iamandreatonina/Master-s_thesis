# Define a list of packages to be loaded
PACKAGES <- c(
"sva",
"tidyverse",
"dplyr",
"readxl",
"ggplot2",
"stringr",
"edgeR",
"DESeq2",
"plotly",
"factoextra",
"cluster",
#"cmake",
"RColorBrewer",
"clusterProfiler",
"biomaRt",
"org.Hs.eg.db"
)
# Load the specified packages
invisible(lapply(PACKAGES, library, character.only = TRUE))
# BiocManager::install('sva')
library(sva)
# library(tidyverse)
library(dplyr)
library(readxl)
library(ggplot2)
library(stringr)
library(magrittr)
library(umap)
library(edgeR)
#BiocManager::install("DESeq2")
library(DESeq2)
#install.packages('factoextra')
#install.packages('cluster')
library(factoextra)
library(cluster)
library(RColorBrewer)
library(clusterProfiler)
library(biomaRt)
library(org.Hs.eg.db)
library(tibble)
library(plotly)
library(rstudioapi)
# Set Session to source file location and then:
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../data/Datasets/Post_manipulation")
`%nin%` <- Negate(`%in%`)
Human_genes <- readxl::read_xlsx('Human-specific.xlsx')
View(Human_genes)
View(Human_genes)
Human_genes[which(Human_genes$`Gene Name` == 'EBF1'),]
setwd('../../ML/Hs_Importance/')
RF_AGE_HS_tuned_importance <- read.csv('RF_AGE_HS_tuned_importance.csv')
View(RF_AGE_HS_tuned_importance)
HS_age_selcted <- Human_genes %>% dplyr::filter(Human_genes$`Ensembl ID` %in% RF_AGE_HS_tuned_importance$X)
View(HS_age_selcted)
RF_AGE_HS_tuned_importance_origin <- cbind(RF_AGE_HS_tuned_importance, Mechanism_of_orgini =HS_age_selcted$`Mechanism of Origin`, Gen_mechanism_origin = HS_age_selcted$`General Mechanism of Origin`)
View(RF_AGE_HS_tuned_importance_origin)
RF_AGE_HS_tuned_importance_origin <- cbind(RF_AGE_HS_tuned_importance, HS_age_selcted)
View(RF_AGE_HS_tuned_importance_origin)
View(Human_genes)
View(HS_age_selcted)
View(RF_AGE_HS_tuned_importance)
View(HS_age_selcted)
colnames(RF_AGE_HS_tuned_importance$Ens_id) <- 'Gene Name'
colnames(RF_AGE_HS_tuned_importance$Ens_id)
colnames(RF_AGE_HS_tuned_importance)
colnames(RF_AGE_HS_tuned_importance)[3]
colnames(RF_AGE_HS_tuned_importance$Ens_id)[3] <- 'Gene Name'
colnames(RF_AGE_HS_tuned_importance)[3] <- 'Gene Name'
RF_AGE_HS_tuned_importance_origin <- merge(RF_AGE_HS_tuned_importance, HS_age_selcted, by='Gene Name')
View(RF_AGE_HS_tuned_importance_origin)
View(RF_AGE_HS_tuned_importance)
colnames(RF_AGE_HS_tuned_importance)[3] <- 'Gene Name'
RF_AGE_HS_tuned_importance_origin <- merge(RF_AGE_HS_tuned_importance, HS_age_selcted, by='Gene Name')
# RF_AGE_HS_tuned_importance_origin %>% dplyr::group_by(Mechanism_of_orgini) %>% dplyr::summarise(total_count = n())
p1 <- plot_ly(RF_AGE_HS_tuned_importance_origin,labels = ~Mechanism_of_orgini, values=RF_AGE_HS_tuned_importance_origin %>% dplyr::group_by(Mechanism_of_orgini) %>% dplyr::summarise(n()) , type = 'pie') %>%  layout(title = 'RF HS AGE tuned importance',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
RF_AGE_HS_tuned_importance_origin2 <- head(RF_AGE_HS_tuned_importance_origin,25)
htmlwidgets::saveWidget(DT::datatable(RF_AGE_HS_tuned_importance_origin2),'table_RF_HS_AGE_tuned_importance_top25.html')
RF_Subtype_HS_tuned_importance <- read.csv('RF_Subtype_HS_tuned_importance.csv')
HS_age_selcted2 <- Human_genes %>% dplyr::filter(Human_genes$`Ensembl ID` %in% RF_Subtype_HS_tuned_importance$X)
View(HS_age_selcted2)
View(RF_Subtype_HS_tuned_importance)
colnames(HS_age_selcted2)
colnames(RF_Subtype_HS_tuned_importance)
colnames(RF_Subtype_HS_tuned_importance)[3] <- 'Gene Name'
RF_Subtype_HS_tuned_importance_origin <- merge(RF_Subtype_HS_tuned_importance,HS_age_selcted2, by='Gene Name')
RF_Subtype_HS_tuned_importance_origin2 <- head(RF_Subtype_HS_tuned_importance_origin,25)
htmlwidgets::saveWidget(DT::datatable(RF_Subtype_HS_tuned_importance_origin2),'table_RF_HS_Subtype_tuned_importance_top25.html')
View(RF_Subtype_HS_tuned_importance_origin)
XGB_AGE_HS_tuned_importance_matrix <- read.csv('XGB_AGE_HS_tuned_importance_matrix.csv')
HS_age_selcted4 <- Human_genes %>% dplyr::filter(Human_genes$`Gene Name` %in% XGB_AGE_HS_tuned_importance_matrix$Feature)
HS_age_selcted4<- HS_age_selcted4[!duplicated(HS_age_selcted4$`Gene Name`),]
View(HS_age_selcted)
HS_age_selcted4 <- Human_genes %>% dplyr::filter(Human_genes$`Gene Name` %in% XGB_AGE_HS_tuned_importance_matrix$Feature)
colnames(XGB_AGE_HS_tuned_importance_matrix)
View(XGB_AGE_HS_tuned_importance_matrix)
View(HS_age_selcted4)
XGB_AGE_HS_tuned_importance_matrix_origin <- merge(XGB_AGE_HS_tuned_importance_matrix, HS_age_selcted4, by = 'Gene Name')
View(HS_age_selcted4)
colnames(XGB_AGE_HS_tuned_importance_matrix)
colnames(XGB_AGE_HS_tuned_importance_matrix)[2] <- 'Gene Name'
colnames(XGB_AGE_HS_tuned_importance_matrix)[2] <- 'Gene Name'
colnames(XGB_AGE_HS_tuned_importance_matrix)
XGB_AGE_HS_tuned_importance_matrix_origin <- merge(XGB_AGE_HS_tuned_importance_matrix, HS_age_selcted4, by ='Gene Name')
XGB_AGE_HS_tuned_importance_matrix_origin_origin2 <- head(XGB_AGE_HS_tuned_importance_matrix_origin,25)
htmlwidgets::saveWidget(DT::datatable(RF_Subtype_importance_HS_origin3),'table_XGB_HS_AGE_tuned_importancetop25.html')
XGB_AGE_HS_tuned_importance_matrix_origin_origin3 <- head(XGB_AGE_HS_tuned_importance_matrix_origin,25)
htmlwidgets::saveWidget(DT::datatable(XGB_AGE_HS_tuned_importance_matrix_origin_origin3),'table_XGB_HS_AGE_tuned_importancetop25.html')
###
XGB_Subtype_HS_tuned_importance_matrix <- read.csv('XGB_Subtype_HS_tuned_importance_matrix.csv')
HS_age_selcted5 <- Human_genes %>% dplyr::filter(Human_genes$`Gene Name` %in% XGB_Subtype_HS_tuned_importance_matrix$Feature)
HS_age_selcted5<- HS_age_selcted5[!duplicated(HS_age_selcted5$`Gene Name`),]
colnames(XGB_Subtype_HS_tuned_importance_matrix)
colnames(XGB_Subtype_HS_tuned_importance_matrix)[2] <- 'Gene Name'
XGB_Subtype_HS_tuned_importance_matrix_origin <-merge(XGB_Subtype_HS_tuned_importance_matrix, HS_age_selcted5, by = 'Gene Name')
XGB_Subtype_HS_tuned_importance_matrix_origin2 <- head(XGB_Subtype_HS_tuned_importance_matrix_origin,25)
htmlwidgets::saveWidget(DT::datatable(RF_Subtype_importance_HS_origin3),'table_XGB_HS_subtype_tuned_importancetop25.html')
htmlwidgets::saveWidget(DT::datatable(XGB_Subtype_HS_tuned_importance_matrix_origin2),'table_XGB_HS_subtype_tuned_importancetop25.html')
table(DEGs$class)
library(sva)
# library(tidyverse)
library(dplyr)
library(readxl)
library(ggplot2)
library(stringr)
library(magrittr)
library(umap)
library(edgeR)
#BiocManager::install("DESeq2")
library(DESeq2)
#install.packages('factoextra')
#install.packages('cluster')
library(factoextra)
library(cluster)
library(RColorBrewer)
library(clusterProfiler)
library(biomaRt)
library(org.Hs.eg.db)
library(tibble)
library(plotly)
library(rstudioapi)
# Set Session to source file location and then:
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../data/Datasets/Post_manipulation")
`%nin%` <- Negate(`%in%`)
Human_genes <- readxl::read_xlsx('Human-specific.xlsx')
#Load datasets
Tumor <- read.csv('Tumor_dataframe.csv',sep =',',header = T) # needs to be unziped
Control <- read.csv('Controls_merged.csv',sep = ',',header = T)
duplicato <- Tumor$ensembl_gene_id[duplicated(Tumor$ensembl_gene_id)]
duplicato2 <- Control$ensembl_gene_id[duplicated(Control$ensembl_gene_id)] # <- empty! Perfect!
#sum <- Tumor %>% dplyr::filter(Tumor$ensembl_gene_id == duplicato)
# rowSums(sum[2:641]) # the first one is the most informative so we use distinct()
Tumor <- distinct(Tumor,ensembl_gene_id,.keep_all =T )
Tumor_2 <- as.matrix(sapply(Tumor[2:1083], as.numeric))
Control_2 <- as.matrix(sapply(Control[2:89], as.numeric))
PreCombat_control_df <- tidyr::gather(as.data.frame(Control_2),key = 'sample',value = 'read_number')
PreCombat_tumor_df_subset <- tidyr::gather(as.data.frame(Tumor_2)[1:20],key = 'sample',value = 'read_number')
jpeg(filename = '../images/control_Pre_Combat_boxplot.jpeg')
dev.off()
#creation of batch for tumor and control, so creation of the vectors for batch separation, so check the data!!
batch_tumor <- c(rep(1,173),rep(2,321),rep(3,38),rep(4,108),rep(5,65),rep(6,377))
batch_control <- c(rep(1,20),rep(2,10),rep(3,40), rep(4,18))
# application of Combat-Seq and creation of adjusted dataframes
tumor_adjusted <- as.data.frame(ComBat_seq(Tumor_2,batch = batch_tumor,group = NULL))
control_adjusted <- as.data.frame(ComBat_seq(Control_2, batch = batch_control, group = NULL))
# adding the ensembl_gene_id column
colnames(control_adjusted)
control_adjusted <- add_column(control_adjusted,'ensembl_gene_id' =Control$ensembl_gene_id, .before = 'TU0049_CD4_HC')
colnames(tumor_adjusted)
tumor_adjusted <- add_column(tumor_adjusted, 'ensembl_gene_id' = Tumor$ensembl_gene_id, .before = 'GSM5491718_16.001')
# Let`s check how many human specific genes we have in our dataset
HSgenes_tumor <- tumor_adjusted %>% dplyr::filter(tumor_adjusted$ensembl_gene_id %in% Human_genes$`Ensembl ID`)
HSgenes_control <- control_adjusted %>% dplyr::filter(control_adjusted$ensembl_gene_id %in% Human_genes$`Ensembl ID`)
# set the dataframe more easier for us to use
control_adjusted1 <- control_adjusted %>% column_to_rownames('ensembl_gene_id')
tumor_adjusted1 <- tumor_adjusted %>% column_to_rownames('ensembl_gene_id')
#let's have a look at the data using a boxplot, we will make a comparison after the normalization
Pre_control_df <- tidyr::gather(control_adjusted1,key = 'sample',value = 'read_number')
Pre_tumor_df_subset <- tidyr::gather(tumor_adjusted1[1:20],key = 'sample',value = 'read_number')
# first we find the DGEList object
edge_c_control <- DGEList(counts = control_adjusted1)
edge_c_tumor <- DGEList(counts = tumor_adjusted1)
# normalize with the edgeR package using the TMM method, which apply and inter and intra normalization of the data, both for the controls and the tumor
edge_n_control <- calcNormFactors(edge_c_control,method = 'TMM')
edge_n_tumor <- calcNormFactors(edge_c_tumor,method = 'TMM')
# from that we create a CPM table with normalized expression values
CPM_control <- as.data.frame(round(cpm(edge_n_control),2))
CPM_tumor <-  as.data.frame(round(cpm(edge_n_tumor),2))
# For what we created this datraframes??
CPM_control_df <- tidyr::gather(CPM_control,key = 'sample',value = 'CPM')
CPM_tumor_df <- tidyr::gather(CPM_tumor,key = 'sample',value = 'CPM')
CPM_tumor_df_toplot <- tidyr::gather(CPM_tumor[1:20],key = 'sample',value = 'CPM')
total_adjusted <- merge(control_adjusted,tumor_adjusted,by='ensembl_gene_id')
total_adjusted1 <- total_adjusted %>% column_to_rownames('ensembl_gene_id')
# creating a dataframe containing the info on the samples, this is needed to be able to perform the DGE, we set the conditions of the samples as healty (H) and tumoral (T)
info_sample_1<-data.frame("sample"=colnames(total_adjusted1))
rownames(info_sample_1)<-info_sample_1$sample
info_sample_2<-as.data.frame(str_split(string=info_sample_1$sample, pattern="_", simplify=T)) #? serve?
colnames(info_sample_2)<-c("condition","replicate")
info_samples<-cbind(info_sample_1, info_sample_2[1:2])
info_samples$condition<-c(rep("H",88),rep("T",1082)) # which are 88 healthy and 705 tumors
info_samples$replicate<-c(rep(1,1170))
# let's filter the dataset and setting the threshold definition
median_thr<-2 #5
cond_tresh<-0.5
# filter_vec<-apply(total_adjusted1, 1, function(y) max(by(y,info_samples_new_cond$condition, function(x) median(x>=median_thr))) )
filter_vec<-apply(total_adjusted1, 1, function(y) max(by(y,info_samples$condition, function(x) median(x>=median_thr))) )
filter_counts_df <- total_adjusted1[filter_vec>=cond_tresh,]
info_samples$type <- 'pediatric'
info_samples$age <- 0
metadataGSE181157<-  readxl::read_xlsx('../Tumors/GSE181157_SampleMetadata.xlsx')
metadataGSE181157$`DFCI ID`<- rownames(info_samples)[89:261]# HERE I KEEP PRE-B AND PRE-T TYPES!
for (row in 1:dim(metadataGSE181157)[1]){
Age <- metadataGSE181157$`Age at Dx (years)`[row]
if (Age<=18){
info_samples$type[rownames(info_samples) == metadataGSE181157$`DFCI ID`[row]] <- 'pediatric'
info_samples$age[rownames(info_samples) == metadataGSE181157$`DFCI ID`[row]] <- round(Age,2)} else{
info_samples$type[rownames(info_samples) == metadataGSE181157$`DFCI ID`[row]] <- 'adult'
info_samples$age[rownames(info_samples) == metadataGSE181157$`DFCI ID`[row]] <- round(Age,2)}
}
metadata_choort_7_8 <- readxl::read_xlsx('../Tumors/Metadata_choort_7_8.xlsx', skip=1)
for (row in 1:dim(metadata_choort_7_8)[1]){  Age <- metadata_choort_7_8$`Age (year)`[row]
if (Age=='Not available'){
info_samples$type[rownames(info_samples) == metadata_choort_7_8$ID[row]] <- 'Unknown'
info_samples$age[rownames(info_samples) == metadata_choort_7_8$ID[row]] <- -1}
else if (as.numeric(Age)<=18){
info_samples$type[rownames(info_samples) == metadata_choort_7_8$ID[row]] <- 'pediatric'
info_samples$age[rownames(info_samples) == metadata_choort_7_8$ID[row]] <- as.numeric(Age)
}
else {
info_samples$type[rownames(info_samples) == metadata_choort_7_8$ID[row]] <- 'adult'
info_samples$age[rownames(info_samples) == metadata_choort_7_8$ID[row]] <- as.numeric(Age)
}}
info_samples$Cell_type <- 'PreB'
# GSE181157 are the first 173 samples
metadata<-  readxl::read_xlsx('../Tumors/GSE181157_SampleMetadata.xlsx')
#metadata_nonHS<-  readxl::read_xlsx('GSE181157_SampleMetadata.xlsx')
#metadata_nonHS$`DFCI ID` <- rownames(clusterino_pam2_nonHS)[1:173]
metadata$`DFCI ID`<- rownames(info_samples)[89:261]
for (row in 1:dim(metadata)[1]){
Diagnosis <- metadata$Diagnosis[row]
if (Diagnosis=='9836/3 - Pre-B ALL'){
info_samples$Cell_type[rownames(info_samples) == metadata$`DFCI ID`[row]] <- 'PreB'
} else{
info_samples$Cell_type[rownames(info_samples) == metadata$`DFCI ID`[row]] <- 'PreT'
}
}
# Dataset T-ALL is all T subtype -> cohort_7_&_8
metadata_cohort_7_8 <- readxl::read_xlsx('../Tumors/Metadata_choort_7_8.xlsx',skip = 1, col_names = T)
for (row in 1:dim(metadata_cohort_7_8)[1]){
Diagnosis <- metadata_cohort_7_8$Subtype[row]
info_samples$Cell_type[rownames(info_samples) == metadata_cohort_7_8$ID[row]] <- 'T'
}
# GSE227832 and GSE228632 is mixed
metadata_GSE227832<-  readxl::read_xlsx('../Tumors/Metadata_GSE227832_GSE228632/NEW_Metadata_GSE227832_GSE228632.xlsx',skip=1, col_names=T) # non ho questa cartella, manco su github
table(metadata_GSE227832$`Subtype at ALL diagnosis`)
for (row in 1:dim(metadata_GSE227832)[1]){
Diagnosis<-metadata_GSE227832$`Subtype at ALL diagnosis`[row]
if (Diagnosis =='T-ALL'){
info_samples$Cell_type[rownames(info_samples) == metadata_GSE227832$public_id[row]] <- 'T'
} else if(Diagnosis == 'PAX5alt'){
info_samples$Cell_type[rownames(info_samples) == metadata_GSE227832$public_id[row]] <- 'B'
}else{
info_samples$Cell_type[rownames(info_samples) == metadata_GSE227832$public_id[row]] <- 'PreB'
}
}
# Dataset GSE133499 is mixed
metadata_GSE133499<-  readxl::read_xlsx('../Tumors/Metadata_GSE133499.xlsx', col_names=T) # the column IPT stand for immunephenotype -> ergo: commoni (Btype), pre B and T or unknown
for (row in 1:dim(metadata_GSE133499)[1]){
Diagnosis<-metadata_GSE133499$IPT[row]
if (Diagnosis=="T"){
info_samples$Cell_type[rownames(info_samples) == metadata_GSE133499$`Anonym ID`[row]] <- "T"
} else if (Diagnosis=="B"){
info_samples$Cell_type[rownames(info_samples) == metadata_GSE133499$`Anonym ID`[row]] <- "B"
} else if (Diagnosis=="pre-B"){
info_samples$Cell_type[rownames(info_samples) == metadata_GSE133499$`Anonym ID`[row]] <- "PreB"
} else{
info_samples$Cell_type[rownames(info_samples) == metadata_GSE133499$`Anonym ID`[row]] <- "Unknown"
}
}
prova<-info_samples[info_samples$condition != "H",]
table(prova$Cell_type)
set.seed(1234)
Thirty_per <- list()
Seventy_per <- list()
info_samples_T<-info_samples[89:1170,]
info_samples_T<-info_samples[89:1170,]
subtype<-info_samples_T[info_samples_T$Cell_type== 'B',]
vector<-1:nrow(subtype)
sample<-sample(vector, 0.3*length(vector), replace=F)
Thirty_per<-rbind(Thirty_per,subtype[sample,])
Seventy_per<- rbind(Seventy_per,subtype[-sample,])
subtype<-info_samples_T[info_samples_T$Cell_type== 'PreB',]
vector<-1:nrow(subtype)
sample<-sample(vector, 0.3*length(vector), replace=F)
Thirty_per<-rbind(Thirty_per,subtype[sample,])
Seventy_per<- rbind(Seventy_per,subtype[-sample,])
subtype<-info_samples_T[info_samples_T$Cell_type== 'PreT',]
vector<-1:nrow(subtype)
sample<-sample(vector, 0.3*length(vector), replace=F)
Thirty_per<-rbind(Thirty_per,subtype[sample,])
Seventy_per<- rbind(Seventy_per,subtype[-sample,])
subtype<-info_samples_T[info_samples_T$Cell_type== 'T',]
vector<-1:nrow(subtype)
sample<-sample(vector, 0.3*length(vector), replace=F)
Thirty_per<-rbind(Thirty_per,subtype[sample,])
Seventy_per<- rbind(Seventy_per,subtype[-sample,])
table(Thirty_per$Cell_type)
table(Thirty_per$type)
filter_counts_df_30<-filter_counts_df[colnames(filter_counts_df) %in% rownames(Thirty_per)]
filter_counts_df_70<-filter_counts_df[colnames(filter_counts_df) %nin% rownames(Thirty_per)]
info_samples_30<-info_samples[rownames(info_samples) %in% rownames(Thirty_per),]
info_samples_70<-info_samples[rownames(info_samples) %nin% rownames(Thirty_per),]
edge_c_total <- DGEList(counts = filter_counts_df_70, group=info_samples_70$condition, samples=info_samples_70, genes=filter_counts_df_70)
edge_n_total <- calcNormFactors(edge_c_total,method = 'TMM')
edge_c_30 <- DGEList(counts = filter_counts_df_30, group=info_samples_30$condition, samples=info_samples_30, genes=filter_counts_df_30)
edge_n_30<- calcNormFactors(edge_c_30,method = 'TMM')
cpm_table_log_30 <- as.data.frame(round(log10(cpm(edge_n_30)+1),2))
# We create the cpm table
cpm_table <-as.data.frame(round(cpm(edge_n_total),2)) # the library size is scaled by the normalization factor
# Here we define the experimental design matrix, we build a model with no intercept also we have two varaibles, one for each condition
# 1 for control and 2 for tumor
design <- model.matrix(~0+group, data = edge_n_total$samples)
colnames(design) <- levels(edge_n_total$samples$group)
rownames(design) <- edge_n_total$samples$sample
# Calculate dispersion and fit the result with edgeR (necessary for differential expression analysis)
edge_d_total <- estimateDisp(edge_n_total,design)
# Fit the data we model the data using a negative binomial distribution
edge_f<-glmQLFit(edge_d_total, design)
# Definition of the contrast (conditions to be compared)
contro <- makeContrasts("T-H", levels=design)
# Fit the model with generalized linear models
edge_t <- glmQLFTest(edge_f,contrast=contro)
DEGs <- as.data.frame(topTags(edge_t,n=13956,p.value = 0.01,sort.by = "logFC"))
DEGs$class <- '='
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC > 1.5)] = '+'
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC < (-1.5))] = '-'
DEGs <- DEGs[order(DEGs$logFC, decreasing = T),] # we order based on the fold change
table(DEGs$class)
DEGs_Hsgenes <- DEGs %>% dplyr::filter(rownames(DEGs) %in% Human_genes$`Ensembl ID`)
Up_HSgenes <- DEGs[DEGs$class=='+',] %>% dplyr::filter(rownames(DEGs[DEGs$class=='+',]) %in% Human_genes$`Ensembl ID`)
Down_HSgenes <- DEGs[DEGs$class=='-',] %>% dplyr::filter(rownames(DEGs[DEGs$class=='-',]) %in% Human_genes$`Ensembl ID`)
table(DEGs_Hsgenes$class)
system('ls')
system('ls ..')
system('mkdir ../Gloria')
setwd('../Gloria')
getwd()
View(DEGs_Hsgenes)
write.csv(DEGs, file = 'DEGs',row.names = F,col.names = T)
write.csv(DEGs_Hsgenes, file = 'DEGs_Hsgenes.csv',row.names = F,col.names = T)
setwd('../Gloria')
write.csv(DEGs, file = 'DEGs.csv',row.names = F,col.names = T)
write.csv(DEGs_Hsgenes, file = 'DEGs_Hsgenes.csv',row.names = F,col.names = T)
install.packages('recount3')
BiocManager::install('recount3')
setwd('../Gloria')
write.csv(DEGs, file = 'DEGs.csv',row.names = T,col.names = T)
write.csv(DEGs_Hsgenes, file = 'DEGs_Hsgenes.csv',row.names = T,col.names = T)
#  File for plotting
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
system('ls')
#500 TF_a B_a
setwd('TF_a_500')
system('ls')
system('../../../')
system('ls ../../../')
getwd()
system('ls ../TF_a_500/TF_a_50 ')
system('ls ../TF_a_50 ')
#  File for plotting
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#500 TF_a B_a
setwd('TF_a_500')
system('../../../sim64 I_a_Cell-cycle_500.prog ../../../Cell_cycle.types ../../../Cell_cycle.fun -o=I_a_results_500')
file_I_A_500 <- read.delim('I_a_results_500.E.out', col.names =
c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1',
'E_2','Chp_a','Chp_i','Pho','S','useless'))
file_I_A_500$useless <- NULL
ggplot(file_I_A_500) +
geom_line(aes(x=time,y=TR_p, color = 'TR_p')) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator, color = 'activator')) +
geom_line(aes(x=time, y = inhibitor_p, color = 'inhibitor_p')) +
scale_color_manual( name = 'legend', values = c( 'TR_p' = 'black', 'activator' = 'green', 'inhibitor_p' = 'red')) +
ggtitle( 'I_a - TF on activator 500 - STOP control') +
xlab( 'Time') +
ylab( 'Molecule number')
#  File for plotting
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#500 TF_a B_a
setwd('TF_a_500')
system('../../../sim64 I_a_Cell-cycle_500.prog ../../../Cell_cycle.types ../../../Cell_cycle.fun -o=I_a_results_500')
file_I_A_500 <- read.delim('I_a_results_500.E.out', col.names =
c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1',
'E_2','Chp_a','Chp_i','Pho','S','useless'))
file_I_A_500$useless <- NULL
ggplot(file_I_A_500) +
geom_line(aes(x=time,y=TR_p, color = 'TR_p')) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator, color = 'activator')) +
geom_line(aes(x=time, y = inhibitor_p, color = 'inhibitor_p')) +
scale_color_manual( name = 'legend', values = c( 'TR_p' = 'black', 'activator' = 'green', 'inhibitor_p' = 'red')) +
ggtitle( 'I_a - TF on activator 500 - STOP control') +
xlab( 'Time') +
ylab( 'Molecule number')
#  File for plotting
library(ggplot2)
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#500 TF_a B_a
setwd('TF_a_500')
system('../../../sim64 I_a_Cell-cycle_500.prog ../../../Cell_cycle.types ../../../Cell_cycle.fun -o=I_a_results_500')
file_I_A_500 <- read.delim('I_a_results_500.E.out', col.names =
c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1',
'E_2','Chp_a','Chp_i','Pho','S','useless'))
file_I_A_500$useless <- NULL
ggplot(file_I_A_500) +
geom_line(aes(x=time,y=TR_p, color = 'TR_p')) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator, color = 'activator')) +
geom_line(aes(x=time, y = inhibitor_p, color = 'inhibitor_p')) +
scale_color_manual( name = 'legend', values = c( 'TR_p' = 'black', 'activator' = 'green', 'inhibitor_p' = 'red')) +
ggtitle( 'I_a - TF on activator 500 - STOP control') +
xlab( 'Time') +
ylab( 'Molecule number')
View(file_I_A_500)
