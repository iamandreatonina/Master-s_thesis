#install.packages("igraph")
library(igraph)
set.seed(seed = setted_seed)
# non capisco coem fare tunning parametri
#inTrain <- createDataPartition(group, list = FALSE)
#trainData <- as.data.frame(t(dat[inTrain,1:1987])) # i need to remove the last row cause it is the groups!
#testData <- as.data.frame(t(dat[-inTrain,1:1987]))
trainData<-as.data.frame(train_ttest) # i need to remove the last row cause it is the groups!
testData<-as.data.frame(test_ttest)
# analyze training set
trainRes <- scudoTrain(trainData, groups = factor(typeGSE110224),nTop = 100, nBottom = 100, alpha = 0.05)
trainRes
# inspect signatures
UP_scudo<-upSignatures(trainRes)[1:5,1:5]
UP_scudo
Consensu_scudo<-consensusUpSignatures(trainRes)[1:5, ]
Consensu_scudo
# generate and plot map of training samples
trainNet <- scudoNetwork(trainRes, N = 0.25) #
# png(filename = 'images/SCUDO_train.png',width=600, height=350)
scudoPlot(trainNet, vertex.label = NA, col=factor(typeGSE110224))
# dev.off()
# perform validation using testing samples
testRes <- scudoTest(trainRes, testData, factor(typeGSE110223), nTop = 100, nBottom = 100)
testNet <- scudoNetwork(testRes, N = 0.25)
# png(filename = 'images/SCUDO_test.png',width=600, height=350)
scudoPlot(testNet, vertex.label = NA, col=factor(typeGSE110223))
# dev.off()
library(caret)
library(rScudo)
metric <- "Accuracy" # metrica piu importante
control <- trainControl(method = "repeatedcv", repeats = 10) # dico il metodo di cross validation
# fit.rf <- caret::train(x= t(train_ttest), y= factor(typeGSE110224), method="rf", metric=metric, trControl=control)
tunegrid <- expand.grid(.mtry=35)
fit.rf  <- train(Type~.,
data=dat_train,
method='rf',
metric=metric,
tuneGrid=tunegrid,
trControl=control)
fit.lda <- train(Type ~ ., data=dat_train, method="lda", metric=metric, trControl=control)
fit.lasso <- train(Type~., data=dat_train, method="glmnet", family = "binomial", TuneGrid = expand.grid(alpha = 1,lambda = seq(0,1,by=0.05)), trControl = control, metric = metric)
fit.ridge <- train(Type~., data=dat_train, method="glmnet", family = "binomial", TuneGrid = expand.grid(alpha = 0,lambda = seq(0,1,by=0.05)), trControl = control, metric = metric)
# model <- scudoModel(nTop = (2:50)*50, nBottom = (2:50)*50, N = 0.25)
# cvRes <- caret::train(x=t(train_ttest), y=typeGSE110224, method = model, trControl = control)
model_final <- scudoModel(nTop = 100, nBottom = 100, N = 0.25,maxDist = 1, weighted = TRUE, complete = FALSE, beta = 1)
scudo_train <- caret::train(Type~., data=dat_train, method=model_final, trControl = control, metric = metric)
results <- resamples(list(LDA=fit.lda, RF=fit.rf, LASSO=fit.lasso, RIDGE=fit.ridge, SCUDO=scudo_train))
png(filename = 'images/Accuracy.png',width=600, height=350)
ggplot(results) + labs(y = "Accuracy")
dev.off()
pippo_RF<-varImp(fit.rf)
impsor <- sort(pippo_RF$importance$Overall, decreasing=TRUE)
png(filename = 'images/RF_varimp.png',width=600, height=350)
hist(impsor, breaks=c(0,5,10,15,20,25,30,35,40,45,50,60,70,100), freq=TRUE, xlab="Variable Importance", main="RF VarImp distribution")
dev.off()
png(filename = 'images/RF_importance.png',width=600, height=350)
plot(pippo_RF, main="Var per RF", top= 20)
dev.off()
#
# BiocManager::install("hgu133a.db")
library("hgu133a.db")
# extract map of interest (probeID to GENE SYMBOL)
my.map <- hgu133aSYMBOL
# not all probeID have a mapping (ie an annotation)
mapped.probes <- mappedkeys(my.map)
# get Entrez ID for the Affy ID of interest (ie. first five)
my.symbols <- as.data.frame(my.map[mapped.probes])
# inspect result
my.symbols[1:10,]
# Select the most important genes for the RF model, I decided to select the ones that have overall importance major than 20
paperino <- as.data.frame(pippo$importance)
important_RF<-paperino[paperino$Overall>30,] # important_RF contains teh importance for teh corrispective gene names that are in names_RF
# extract the rownames
names_RF<-rownames(paperino)[paperino$Overall>30] # we have 291 probe ID
# check what other maps are available
#ls("package:hgug4112a.db")
# MAP MY STAT IDS INTO GENE SYMBOL
# my.names_stats<-as.data.frame(my.symbols$symbol[my.symbols$probe_id %in% rownames(stats)])
my.names_RF<-as.data.frame(my.symbols$symbol[my.symbols$probe_id %in% names_RF]) # 277 genes
write.table(my.names_RF,  "nomi_RF.txt", row.names = FALSE, sep="\n", quote=FALSE)
library(gprofiler2)
# see vignette at https://cran.r-project.org/web/packages/gprofiler2/vignettes/gprofiler2.html
gostres_RF <- gost(query = c(my.names_RF$`my.symbols$symbol[my.symbols$probe_id %in% names_RF]`), organism = "hsapiens", ordered_query = TRUE, multi_query = FALSE, significant = TRUE, exclude_iea = FALSE, measure_underrepresentation = FALSE, evcodes = FALSE, user_threshold = 0.05, correction_method = "g_SCS", domain_scope = "annotated", custom_bg = NULL, numeric_ns = "", sources = NULL, as_short_link = FALSE)
# CHE SCHIFO R
names(gostres_RF)
head(gostres_RF$result)
table(gostres_RF$result$source)
# CORUM GO:BP GO:CC GO:MF   HPA  KEGG MIRNA  REAC    TF    WP
#     1    75    22    10    43     2     8     4    12     4
sorted_RF<-sort(gostres_RF$result$p_value)
# extract the first top 5 terms for teh p-value and use them in the gostplot to highligt them
to_highlight_RF<-head(sorted_RF,10)
highligted_RF<-gostres_RF$result[gostres_RF$result$p_value %in% to_highlight_RF,]
# visualize results using a Manhattan plot
gostplot(gostres_RF, capped = TRUE, interactive = TRUE)
# when ready, create publication quality (static) plot + table of interesting terms/pathways
# under save thegostplot in p
p_RF <- gostplot(gostres_RF, capped = TRUE, interactive = FALSE)
# selected the first two terms (taken from the head(gostres2$result)) that have the highest pval and good pvalue (under 0.05).
# The proportion of genes in the input list that are annotated to the function. Defined as intersection_size/query_size.
# FOR MORE INFO ON TEH OUTPUT LOOK AT: https://biit.cs.ut.ee/gprofiler/page/apis
publish_gostplot(p_RF, highlight_terms = c(highligted_RF$term_id),width = NA, height = NA, filename = NULL )
#BiocManager::install("KEGGREST")
#BiocManager::install("KEGGgraph")
#BiocManager::install("AnnotationDbi")
#BiocManager::install("org.Hs.eg.db")
library("KEGGREST")
library("KEGGgraph")
library("AnnotationDbi")
library("org.Hs.eg.db")
#BiocManager::install("ggkegg")
install.packages('pathfindR')
# VA AGGIORNATO R ma non mi fido da sola
BiocManager::install("ggkegg")
install.packages("magick")
library("pathfindR")
if (!("limma" %in% installed.packages())) {
# Install this package if it isn't installed yet
BiocManager::install("limma", update = FALSE)
}
library(limma)
design <- model.matrix(~0+type)
colnames(design) <- c("Control","Tumor")
rownames(design) <- colnames(total_median_norm)
fit <- lmFit(total_median_norm,design)
cont.matrix <- makeContrasts(contrasts = "Tumor-Control", levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
all_deg<-topTable(fit2, adjust="BH", number=Inf)
#BiocManager::install("KEGGREST")
#BiocManager::install("KEGGgraph")
#BiocManager::install("AnnotationDbi")
#BiocManager::install("org.Hs.eg.db")
library("KEGGREST")
library(KEGGREST)
library(KEGGgraph)
library(AnnotationDbi)
library(org.Hs.eg.db))
library(KEGGREST)
library(KEGGgraph)
library(AnnotationDbi)
library(org.Hs.eg.db)
data_path<-as.data.frame(my.names_RF)
data_path<-cbind(data_path,all_deg$logFC[rownames(names_RF) %in% my.symbols$probe_id])
data path
View(data_path)
my.symbols$probe_id
View(my.symbols)
rownames(names_RF) %in% my.symbols$probe_id
names_RF
View(my.names_RF)
my.symbols_2 <- my.symbols %>%  filter(my.symbols$symbol %in% my.names_RF$`my.symbols$symbol[my.symbols$probe_id %in% names_RF]`)
View(my.symbols_2)
trial <- rownames(names_RF)
trial <- names_RF
trial <- names_RF
trail
trial
data_path<-cbind(data_path,all_deg$logFC[names_RF %in% my.symbols$probe_id])
my.symbols_2 <- names_RF %>%  filter(names_RF %in% my.symbols$probe_id)
my.symbols_2 <- names_RF[names_RF %in% my.symbols$probe_id]
my.symbols_2
all_deg
data_path<-cbind(data_path,all_deg$logFC[rownames(all_deg) %in% my.symbols_2])
data_path
data_path<-cbind(data_path,all_degF$adj.P.Val[rownames(all_deg) %in% my.symbols_2])
data_path<-cbind(data_path,all_deg$adj.P.Val[rownames(all_deg) %in% my.symbols_2])
dim(data_path)
colnames(data_path)<-c("GENE", "CHANGE", "P_VALUE")
View(data_path)
head(data_path)
RA_input<-data_path
pathfindR_results <- run_pathfindR(RA_input, iterations = 1, gene_sets = "KEGG")
pathfindR_cluster <- cluster_enriched_terms(pathfindR_results)
term_gene_graph(pathfindR_results)
visualize_terms(pathfindR_results,RA_input)
library(ggplot2)
visualize_terms(pathfindR_results,RA_input)
term_gene_graph(pathfindR_results)
pathfindR_results
pathfindR_cluster
pathfindR_results <- run_pathfindR(RA_input, iterations = 1, gene_sets = "KEGG")
pathfindR_results <- run_pathfindR(RA_input, iterations = 1, gene_sets = "KEGG")
pathfindR_cluster <- cluster_enriched_terms(pathfindR_results)
term_gene_graph(pathfindR_results)
#REACTOME
pathfindR_results_2 <- run_pathfindR(RA_input, iterations = 1, gene_sets = "Reactome")
library(data.table)
library(tidyr)
library(dplyr)
library(DENDRO)
library(tidyverse)
library(stringr)
# devtools::install_github("zhouzilu/DENDRO")
#nomi_files<-read.table("names.txt")
#new<-sub("./", "", nomi_files$V1)
#names<-sub("_longshot.vcf", "", new)
dendro_process1 <- function(name){
dlist2 <- fread(paste(name, sep = ""),  header =T, skip = '#CHROM')
chr_list=sapply(seq(1,22),function(x)paste0('chr',x),simplify = T)
dlist2 <- dlist2 %>% filter(`#CHROM`%in%chr_list)
if (length(dlist2$POS)!=0){
print(name)
Format2 <- dlist2%>%select(FORMAT)
Info2 <- dlist2 %>% select(`#CHROM`,POS,REF,ALT,INFO,SAMPLE)
Info <- dlist2 %>% select(`#CHROM`,POS,REF,ALT)
dlist <- dlist2 %>% select(-`#CHROM`,-POS,-ID,-REF,-ALT,-QUAL,-FILTER,-INFO,-FORMAT)
# By checking the head of the format, we decided the position of GT (genotype info), AD (allele read depth), and DP (total read depth) separated by ":"
# As shown by the example below, GT position is 1, AD position is 2 and DP position is 3.
# Different version of GATK tool may assign different names of the varaibles. Please refer to the GATK manual for more information.
# Io ho AC e AM per la allele depth, che sono le observation e le ambiguos observations
#head(Format2)
GT_pos=1 # is position 1 in my file in column SAMPLE
AC_pos=2 # is in position 2 in my column INFO
AM_pos=3 # is in position 3 in my column INFO
DP_pos=1 # is position 1 in my file in column INFO
# TO create X. I need to sum AC and AM cause togheter I have the allele depth!
exinfo_x_1 <- function(sample,info){
prova<-strsplit(sample,':')
prova_info<-strsplit(info,';')
#print(prova)
result<-mapply(exinfo_x_2,prova,prova_info)
return(result)
}
exinfo_x_2<-function(x,info){
vec<-c()
if(x[GT_pos]=='./.'){
vec<-append(vec,NA)
}else{
#print(x[AD_pos])
vec<-append(vec,as.numeric(strsplit(info[AC_pos],',')[[1]][2],simplify=T))
return(vec)
}
} # vec<-append(vec,sum(as.numeric(strsplit(info[AC_pos],',')[[1]][2],as.numeric(strsplit(info[AM_pos],',')[[1]][2]),simplify=T)))
X_final=exinfo_x_1(Info2$SAMPLE, Info2$INFO)
X<-as.data.frame(X_final)
# NOW to create N
exinfo_n_1 <- function(sample,info){
prova<-strsplit(sample,':')
prova_info<-strsplit(info,';')
#print(prova)
result<-mapply(exinfo_n_2,prova,prova_info)
return(result)
}
exinfo_n_2<-function(x,info){
vec<-c()
if(x[GT_pos]=='./.'){
vec<-append(vec,NA)
}else{
#print(x[AD_pos])
vec<-append(vec,as.numeric(strsplit(info[DP_pos],'=')[[1]][2]))
return(vec)
}
}
N_final=exinfo_n_1(Info2$SAMPLE, Info2$INFO)
N<-as.data.frame(N_final)
# FINALLY to create Z
exinfo_z_1 <- function(sample){
prova<-strsplit(sample,':')
vec<-c()
if(prova[GT_pos]=='./.'){
vec<-append(vec,NA)
}else if(prova[GT_pos]!='0/0'){
vec<-append(vec,1)
}else{
vec<-append(vec,0)
}
return(vec)
}
Z_final=sapply(Info2$SAMPLE,exinfo_z_1)
Z<-as.data.frame(Z_final)
# Because the vector is too big. I run it on the cluster instead. All you need is to store the object dlist
# Quick fitering
# If 99% of the cells did not detect any read, we remove such entry.
thres=floor(0.01*ncol(X))
sel=rowSums(!is.na(Z))>thres
X=X[sel,]
N=N[sel,]
Z=Z[sel,]
X[is.na(X)]<-0
N[is.na(N)]<-0
demo_qc=data.frame(X,N,Z,Info)
return(demo_qc)
}
#save(Info,X,N,Z,file='DENDRO_input.rda')
}
# all my positions of the type chrN:posN
merging_chr_pos<-function(chr,pos){
new_pos<-gsub(" ",":",paste(chr,pos))
#print(new_pos)
return(new_pos)
}
merging_X<-function(df){ # takes in input a dataframe and generate a dataframe of only position and X
X<-df$X
myPOS<-df$new_pos
new_df<-data.frame(X, myPOS)
return(new_df)
}
merging_N<-function(df){ # takes in input a dataframe and generate a dataframe of only position and X
N<-df$N
myPOS<-df$new_pos
new_df<-data.frame(N, myPOS)
return(new_df)
}
merging_Z<-function(df){ # takes in input a dataframe and generate a dataframe of only position and X
Z<-df$Z
myPOS<-df$new_pos
new_df<-data.frame(Z, myPOS)
return(new_df)
}
merging_ref_alt<-function(df){ # takes in input a dataframe and generate a dataframe of only position and X
REF<-df$REF
ALT<-df$ALT
myPOS<-df$new_pos
new_df<-data.frame(myPOS, REF, ALT)
return(new_df)
}
# function1 to generate all the X
funzione1<-function(name) {
df<-dendro_process1(name) # genero il mio dataframe in cui ho le info di una cellula e le X, Z e N
#print(df)
# funzione_2 per generare il dataframe per X, Y ed Y
new<-merging_chr_pos(df$X.CHROM, df$POS) # I add this new column to my dataframe
df$new_pos<-new
#print(df)
# So now I have my dataframes that have the positions of all their mutations in a single column
df_X<-merging_X(df)
#print(name)
#print(df_X)
# appendo i dataframe generati alle liste
l_X <- c(l_X,list(df_X))
return(l_X)
}
# function2 for the N
funzione2<-function(name) {
df<-dendro_process1(name) # genero il mio dataframe in cui ho le info di una cellula e le X, Z e N
# funzione_2 per generare il dataframe per X, Y ed Y
new<-merging_chr_pos(df$X.CHROM, df$POS) # I add this new column to my dataframe
df$new_pos<-new
# So now I have my dataframes that have the positions of all their mutations in a single column
df_N<-merging_N(df) # generate a dataframe with column N and chr position
# appendo i dataframe generati alle liste
l_N <- append(l_N,list(df_N))
return(l_N)
}
# function 3 for the Z
funzione3<-function(name) {
df<-dendro_process1(name) # genero il mio dataframe in cui ho le info di una cellula e le X, Z e N
# funzione_2 per generare il dataframe per X, Y ed Y
new<-merging_chr_pos(df$X.CHROM, df$POS) # I add this new column to my dataframe
df$new_pos<-new
# So now I have my dataframes that have the positions of all their mutations in a single column
df_Z<-merging_Z(df)
# appendo i dataframe generati alle liste
l_Z <- append(l_Z,list(df_Z))
return(l_Z)
}
funzione_INFO<-function(name) {
df<-dendro_process1(name) # genero il mio dataframe in cui ho le info di una cellula e le X, Z e N
# funzione_2 per generare il dataframe per X, Y ed Y
new<-merging_chr_pos(df$X.CHROM, df$POS) # I add this new column to my dataframe
df$new_pos<-new
# So now I have my dataframes that have the positions of all their mutations in a single column
df<-merging_ref_alt(df) # generate a dataframe with column N and chr position
# appendo i dataframe generati alle liste
l_info <- append(l_info,list(df))
return(l_info)
}
l_X<-list()
l_N<-list()
l_Z<-list()
l_info<-list()
# qui cè da mettere la cartella con dentro tutti i vcf files
files <- list.files(path="~/Desktop/Andre/", pattern="*recode.vcf", full.names=TRUE, recursive=FALSE)
#not_wanted<-list.files(path="C:/Users/glori/Desktop/Brigham_trainship/Pipeline in R/pychopper_second_version", pattern="*vcf.gz", full.names=TRUE, recursive=FALSE)
#not_wanted2<-list.files(path="C:/Users/glori/Desktop/Brigham_trainship/Pipeline in R/pychopper_second_version", pattern="*.final", full.names=TRUE, recursive=FALSE)
#files1<-base::setdiff(total,not_wanted)
#files<-base::setdiff(files1,not_wanted2)
# TO CHANGEE
#name<-"final_patients/patient_AML1007.vcf_final.vcf.recode.vcf"
#list_X<-funzione1(name)
#list_N<-funzione1(name)
#list_Z<-funzione1(name)
list_X<-mapply(funzione1,files) #put all data frames into list
list_N<-mapply(funzione2,files) #put all data frames into list
list_Z<-mapply(funzione3,files) #put all data frames into list
list_Info<-mapply(funzione_INFO,files) #put all data frames into list
#merge all data frames in list
all_X<-list_X %>% reduce(full_join, by='myPOS')
# replace na with 0
all_X <- all_X %>% replace(is.na(.), 0)
#merge all data frames in list
all_N<-list_N %>% reduce(full_join, by='myPOS')
# replace na with 0
all_N <- all_N %>% replace(is.na(.), 0)
#merge all data frames in list
all_Z <-list_Z %>% reduce(full_join, by='myPOS')
# replace na with 0
all_Z <- all_Z %>% replace(is.na(.), 0)
all_Info<-list_Info %>% reduce(full_join, by='myPOS')
all_Info <- all_Info %>% replace(is.na(.), 0)
# Split name column into firstname and last name
all_Info[c('CHROM','POS')]<-str_split_fixed(all_Info$myPOS, ':', 2)
all_Info['POS']<-as.integer(all_Info$POS)
#all_Info$try <- apply(all_Info, 1, function(x) paste(x[!is.zero(x)], collapse = ", "))
Prova<-all_Info %>% select(-myPOS, -CHROM, -POS)
out <- data.frame(REF=apply(Prova,1,function(x) paste0(x,collapse = '')))
out$REF <- str_remove(out$REF, "[0]+")
all_Info[c('REF','ALL')]<-str_split_fixed(out$REF, '', 2)
all_Info[c('ALT','ALL')]<-str_split_fixed(all_Info$ALL, '', 2)
Info<-all_Info %>% select(CHROM, POS, REF, ALT)
colnames(all_X)<-c(1, "myPOS", c(3:dim(all_X)[2]))
colnames(all_N)<-c(1, "myPOS", c(3:dim(all_N)[2]))
colnames(all_Z)<-c(1, "myPOS", c(3:dim(all_Z)[2]))
X<-data.matrix(all_X %>% select(-myPOS))
N<-data.matrix(all_N %>% select(-myPOS))
Z<-data.matrix(all_Z %>% select(-myPOS))
# Info need to have the following information inside:`#CHROM`,POS,REF,ALT
data_final<-data.frame(Info)
demo_qc <- FilterCellMutation(X,Z,N,Info, cut.off.VAF = 0.05, cut.off.sd = 5)
#print("variant qc done")
demo_qc$dist <- DENDRO.dist(X,N,Z,show.progress=FALSE)
library(data.table)
library(tidyr)
library(dplyr)
library(DENDRO)
library(tidyverse)
library(stringr)
file_B_A <- read.delim('B_a_results.E.out')
setwd("~/Desktop/tesi/BlenX/models_thesis/B_a")
file_B_A <- read.delim('B_a_results.E.out')
View(file_B_A)
file_B_A <- read.delim('B_a_results.E.out', col.names = c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1','E_2','Chp_a','Chp_i','Pho','S'))
file_B_A <- read.delim('B_a_results.E.out', col.names = c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1','E_2','Chp_a','Chp_i','Pho','S','useless'))
file_B_A$useless <- NULL
library(ggplot2)
View(file_B_A)
ggplot(file_B_A, aes(x=time,y=TR_p))
ggplot(file_B_A, aes(x=time,y=TR_p)) + geom_line()
ggplot(file_B_A, aes(x=time,y=TR_p)) +
geom_line()
ggplot(file_B_A, aes(x=time,y=TR_p)) +
geom_line() +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray')
ggplot(file_B_A, aes(x=time,y=TR_p)) +
geom_line() +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(file_B_A, aes(x=time, y= activator)) +
geom_line(file_B_A, aes(x=time, y = inhibitor))
ggplot(file_B_A) +
geom_line(aes(x=time,y=TR_p)) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator)) +
geom_line(aes(x=time, y = inhibitor))
ggplot(file_B_A) +
geom_line(aes(x=time,y=TR_p)) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator),col = 'green') +
geom_line(aes(x=time, y = inhibitor), col = 'red')
ggplot(file_B_A) +
geom_line(aes(x=time,y=TR_p)) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator_p),col = 'green') +
geom_line(aes(x=time, y = inhibitor_p), col = 'red')
ggsave(filename = 'B_a_stop.png', plot = last_plot())
ggplot(file_B_A) +
geom_line(aes(x=time,y=TR_p)) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator_p),col = 'green') +
geom_line(aes(x=time, y = inhibitor_p), col = 'red')+
legend()
ggplot(file_B_A) +
geom_line(aes(x=time,y=TR_p, color = 'val1')) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator_p, color = 'val2')) +
geom_line(aes(x=time, y = inhibitor_p, color = 'val3')) +
scale_color_manual( name = 'legend', values = c( 'val1' = 'black', 'val2' = 'green', 'val3' = 'red'))
ggplot(file_B_A) +
geom_line(aes(x=time,y=TR_p, color = 'TR_p')) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator_p, color = 'activator_p')) +
geom_line(aes(x=time, y = inhibitor_p, color = 'inhibitor_p')) +
scale_color_manual( name = 'legend', values = c( 'TR_p' = 'black', 'activator_p' = 'green', 'inhibitor_p' = 'red'))
ggsave(filename = 'B_a_stop.png', plot = last_plot())
library(ggplot2)
file_B_A <- read.delim('B_a_results.E.out', col.names = c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1','E_2','Chp_a','Chp_i','Pho','S','useless'))
file_B_A$useless <- NULL
ggplot(file_B_A) +
geom_line(aes(x=time,y=TR_p, color = 'TR_p')) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator, color = 'activator_p')) +
geom_line(aes(x=time, y = inhibitor_p, color = 'inhibitor_p')) +
scale_color_manual( name = 'legend', values = c( 'TR_p' = 'black', 'activator_p' = 'green', 'inhibitor_p' = 'red'))
ggplot(file_B_A) +
geom_line(aes(x=time,y=TR_p, color = 'TR_p')) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator_p, color = 'activator_p')) +
geom_line(aes(x=time, y = inhibitor_p, color = 'inhibitor_p')) +
scale_color_manual( name = 'legend', values = c( 'TR_p' = 'black', 'activator_p' = 'green', 'inhibitor_p' = 'red'))
file_B_I <- read.delim('B_i_results.E.out', col.names = c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1','E_2','Chp_a','Chp_i','Pho','S','useless'))
setwd("~/Desktop/tesi/BlenX/models_thesis/B_i")
file_B_I <- read.delim('B_i_results.E.out', col.names = c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1','E_2','Chp_a','Chp_i','Pho','S','useless'))
file_B_I <- read.delim('B_i_results.E.out', col.names = c('time','TR','TR_p','activator','activator_p','inhibitor','inhibitor_p','TF_a','TF_i','E_1','E_2','Chp_a','Chp_i','Pho','S','useless'))
file_B_I$useless <- NULL
ggplot(file_B_I) +
geom_line(aes(x=time,y=TR_p, color = 'TR_p')) +
geom_hline(yintercept = 150, linetype = 'dashed', color = 'gray') +
geom_line(aes(x=time, y= activator_p, color = 'activator_p')) +
geom_line(aes(x=time, y = inhibitor_p, color = 'inhibitor_p')) +
scale_color_manual( name = 'legend', values = c( 'TR_p' = 'black', 'activator_p' = 'green', 'inhibitor_p' = 'red'))
ggsave(filename = 'B_i_go.png', plot = last_plot())
